name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend Tests
  test-backend:
    name: Backend Tests (Django)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Django checks
      env:
        DJANGO_SECRET_KEY: 'test-secret-key-for-ci'
        DEBUG: 'True'
        DB_ENGINE: 'django.db.backends.postgresql'
        DB_NAME: 'test_db'
        DB_USER: 'postgres'
        DB_PASSWORD: 'postgres'
        DB_HOST: 'localhost'
        DB_PORT: '5432'
      run: |
        python manage.py check
    
    - name: Run migrations
      env:
        DJANGO_SECRET_KEY: 'test-secret-key-for-ci'
        DEBUG: 'True'
        DB_ENGINE: 'django.db.backends.postgresql'
        DB_NAME: 'test_db'
        DB_USER: 'postgres'
        DB_PASSWORD: 'postgres'
        DB_HOST: 'localhost'
        DB_PORT: '5432'
      run: |
        python manage.py migrate
    
    - name: Run Django tests
      env:
        DJANGO_SECRET_KEY: 'test-secret-key-for-ci'
        DEBUG: 'True'
        DB_ENGINE: 'django.db.backends.postgresql'
        DB_NAME: 'test_db'
        DB_USER: 'postgres'
        DB_PASSWORD: 'postgres'
        DB_HOST: 'localhost'
        DB_PORT: '5432'
      run: |
        python manage.py test --parallel

  # Frontend Tests
  test-frontend:
    name: Frontend Tests (React)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Run frontend tests (if available)
      working-directory: ./frontend
      run: npm test || echo "No tests configured"

  # Code Quality & Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python code quality tools
      run: |
        pip install flake8 black bandit safety
    
    - name: Run Flake8 (Linting)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
    
    - name: Check code formatting with Black
      run: |
        black --check . || true
    
    - name: Run Bandit (Security)
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Check for known vulnerabilities
      run: |
        safety check || true

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Tor Docker image
      run: |
        if [ -f Dockerfile.tor ]; then
          docker build -f Dockerfile.tor -t mp-tor-proxy:test .
        else
          echo "⚠️ Dockerfile.tor not found, skipping Docker build"
        fi
    
    - name: Test Docker Compose
      run: |
        if [ -f docker-compose.tor.yml ]; then
          docker compose -f docker-compose.tor.yml config
        else
          echo "⚠️ docker-compose.tor.yml not found, skipping"
        fi

  # Documentation Check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for required documentation
      run: |
        echo "Checking for essential documentation files..."
        test -f README.md || echo "⚠️  README.md missing"
        test -f docs/TOR_INTEGRATION_ARCHITECTURE.md || echo "⚠️  Tor docs missing"
        test -f requirements.txt || echo "⚠️  requirements.txt missing"
        echo "✅ Documentation check complete"

  # Dependency Review (on PRs only)
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate

  # All checks passed
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, code-quality, docker-build, docs-check]
    if: always()
    
    steps:
    - name: Check all jobs
      run: |
        echo "Backend Tests: ${{ needs.test-backend.result }}"
        echo "Frontend Tests: ${{ needs.test-frontend.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        echo "Docs Check: ${{ needs.docs-check.result }}"
        
        if [ "${{ needs.test-backend.result }}" != "success" ] || \
           [ "${{ needs.test-frontend.result }}" != "success" ] || \
           [ "${{ needs.docker-build.result }}" != "success" ]; then
          echo "❌ Some checks failed"
          exit 1
        else
          echo "✅ All checks passed!"
        fi
