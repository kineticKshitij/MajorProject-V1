# Generated by Django 5.2.6 on 2025-10-03 11:59

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('googledorks', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EntityType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('company', 'Company'), ('person', 'Person'), ('organization', 'Organization'), ('government', 'Government Agency'), ('educational', 'Educational Institution'), ('domain', 'Domain/Website'), ('project', 'Project/Initiative'), ('event', 'Event/Conference')], max_length=50, unique=True)),
                ('display_name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(default='bi-building', help_text='Bootstrap icon class', max_length=50)),
                ('color', models.CharField(default='#007bff', help_text='Hex color code', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Entity Type',
                'verbose_name_plural': 'Entity Types',
                'ordering': ['display_name'],
            },
        ),
        migrations.AddField(
            model_name='googledork',
            name='entity_placeholders',
            field=models.JSONField(blank=True, default=list, help_text='Available placeholders like {entity_name}, {domain}'),
        ),
        migrations.AddField(
            model_name='googledork',
            name='supports_entities',
            field=models.BooleanField(default=False, help_text='Whether this dork can be used with entity placeholders'),
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Primary name of the entity', max_length=200)),
                ('aliases', models.JSONField(blank=True, default=list, help_text='Alternative names, acronyms, etc.')),
                ('description', models.TextField(blank=True, help_text='Brief description of the entity')),
                ('industry', models.CharField(blank=True, max_length=100)),
                ('location', models.CharField(blank=True, help_text='Primary location/headquarters', max_length=200)),
                ('founded_date', models.DateField(blank=True, null=True)),
                ('website', models.URLField(blank=True)),
                ('domains', models.JSONField(blank=True, default=list, help_text='Known domains associated with entity')),
                ('social_media', models.JSONField(blank=True, default=dict, help_text='Social media profiles')),
                ('priority', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority'), ('critical', 'Critical Priority')], default='medium', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active Research'), ('completed', 'Research Completed'), ('on_hold', 'On Hold'), ('archived', 'Archived')], default='active', max_length=20)),
                ('tags', models.JSONField(blank=True, default=list, help_text='Custom tags for categorization')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_researched', models.DateTimeField(blank=True, null=True)),
                ('search_count', models.PositiveIntegerField(default=0)),
                ('results_found', models.PositiveIntegerField(default=0)),
                ('assigned_to', models.ManyToManyField(blank=True, related_name='assigned_entities', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_entities', to=settings.AUTH_USER_MODEL)),
                ('entity_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='googledorks.entitytype')),
            ],
            options={
                'verbose_name': 'Entity',
                'verbose_name_plural': 'Entities',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.AddField(
            model_name='searchresult',
            name='entity',
            field=models.ForeignKey(blank=True, help_text='Associated entity if this is entity-specific search', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dork_results', to='googledorks.entity'),
        ),
        migrations.CreateModel(
            name='EntityNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('note_type', models.CharField(choices=[('observation', 'Observation'), ('finding', 'Research Finding'), ('hypothesis', 'Hypothesis'), ('todo', 'To Do'), ('warning', 'Warning'), ('contact', 'Contact Information')], default='observation', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('is_private', models.BooleanField(default=False, help_text='Private to creator only')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='googledorks.entity')),
            ],
            options={
                'verbose_name': 'Entity Note',
                'verbose_name_plural': 'Entity Notes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EntitySearchTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Template name', max_length=100)),
                ('description', models.TextField(help_text='What this template searches for')),
                ('query_template', models.TextField(help_text='Dork query with placeholders like {entity_name}, {domain}')),
                ('category', models.CharField(choices=[('basic_info', 'Basic Information'), ('contact_info', 'Contact Information'), ('employees', 'Employee Information'), ('financials', 'Financial Information'), ('vulnerabilities', 'Security Vulnerabilities'), ('documents', 'Document Discovery'), ('social_media', 'Social Media Presence'), ('partnerships', 'Partnerships & Relations'), ('news', 'News & Press'), ('infrastructure', 'Technical Infrastructure')], default='basic_info', max_length=50)),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], default='low', max_length=20)),
                ('difficulty', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('entity_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_templates', to='googledorks.entitytype')),
            ],
            options={
                'verbose_name': 'Entity Search Template',
                'verbose_name_plural': 'Entity Search Templates',
                'ordering': ['entity_type', 'category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EntitySearchSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('auto_execute', models.BooleanField(default=False, help_text='Automatically execute all templates')),
                ('save_results', models.BooleanField(default=True, help_text='Save search results')),
                ('notify_completion', models.BooleanField(default=False, help_text='Notify when session completes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('total_searches', models.PositiveIntegerField(default=0)),
                ('total_results', models.PositiveIntegerField(default=0)),
                ('interesting_results', models.PositiveIntegerField(default=0)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_sessions', to='googledorks.entity')),
                ('search_templates', models.ManyToManyField(blank=True, related_name='sessions', to='googledorks.entitysearchtemplate')),
            ],
            options={
                'verbose_name': 'Entity Search Session',
                'verbose_name_plural': 'Entity Search Sessions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EntityAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text="Attribute name (e.g., 'CEO', 'Stock Symbol', 'Employee Count')", max_length=100)),
                ('value', models.TextField(help_text='Attribute value')),
                ('value_type', models.CharField(choices=[('text', 'Text'), ('number', 'Number'), ('date', 'Date'), ('url', 'URL'), ('email', 'Email'), ('phone', 'Phone')], default='text', max_length=20)),
                ('is_public', models.BooleanField(default=True, help_text='Whether this attribute should be publicly visible')),
                ('source', models.CharField(blank=True, help_text='Source of this information', max_length=200)),
                ('confidence', models.CharField(choices=[('low', 'Low Confidence'), ('medium', 'Medium Confidence'), ('high', 'High Confidence'), ('verified', 'Verified')], default='medium', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributes', to='googledorks.entity')),
            ],
            options={
                'verbose_name': 'Entity Attribute',
                'verbose_name_plural': 'Entity Attributes',
                'ordering': ['key', '-updated_at'],
                'unique_together': {('entity', 'key')},
            },
        ),
        migrations.CreateModel(
            name='EntityRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship_type', models.CharField(choices=[('parent_company', 'Parent Company'), ('subsidiary', 'Subsidiary'), ('partner', 'Business Partner'), ('competitor', 'Competitor'), ('supplier', 'Supplier'), ('customer', 'Customer'), ('employee', 'Employee'), ('founder', 'Founder'), ('investor', 'Investor'), ('acquired_by', 'Acquired By'), ('acquired', 'Acquired'), ('related', 'Related Entity')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('confidence', models.CharField(choices=[('low', 'Low Confidence'), ('medium', 'Medium Confidence'), ('high', 'High Confidence'), ('verified', 'Verified')], default='medium', max_length=20)),
                ('source', models.CharField(blank=True, help_text='Source of this relationship info', max_length=200)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('from_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships_from', to='googledorks.entity')),
                ('to_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships_to', to='googledorks.entity')),
            ],
            options={
                'verbose_name': 'Entity Relationship',
                'verbose_name_plural': 'Entity Relationships',
                'ordering': ['-created_at'],
                'unique_together': {('from_entity', 'to_entity', 'relationship_type')},
            },
        ),
        migrations.CreateModel(
            name='EntitySearchResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=500)),
                ('url', models.URLField(max_length=2000)),
                ('snippet', models.TextField(blank=True)),
                ('domain', models.CharField(blank=True, max_length=200)),
                ('relevance_score', models.FloatField(default=0.0, help_text='AI-calculated relevance score')),
                ('is_interesting', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('contains_sensitive_info', models.BooleanField(default=False)),
                ('extracted_info', models.JSONField(blank=True, default=dict, help_text='Extracted structured information')),
                ('tags', models.JSONField(blank=True, default=list)),
                ('notes', models.TextField(blank=True)),
                ('found_at', models.DateTimeField(auto_now_add=True)),
                ('last_verified', models.DateTimeField(blank=True, null=True)),
                ('verification_status', models.CharField(choices=[('not_checked', 'Not Checked'), ('accessible', 'Accessible'), ('requires_auth', 'Requires Authentication'), ('not_found', 'Not Found'), ('blocked', 'Access Blocked')], default='not_checked', max_length=20)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_results', to='googledorks.entity')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='results', to='googledorks.entitysearchsession')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='googledorks.entitysearchtemplate')),
            ],
            options={
                'verbose_name': 'Entity Search Result',
                'verbose_name_plural': 'Entity Search Results',
                'ordering': ['-found_at'],
                'unique_together': {('entity', 'url')},
            },
        ),
    ]
