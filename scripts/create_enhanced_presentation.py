#!/usr/bin/env python
"""
Generate an enhanced PowerPoint presentation with charts and visual elements
"""

from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import PP_ALIGN
from pptx.dml.color import RGBColor
from pptx.enum.shapes import MSO_SHAPE
from pptx.enum.chart import XL_CHART_TYPE
from pptx.chart.data import CategoryChartData
import os

def create_enhanced_presentation():
    """Create an enhanced presentation with charts and visuals"""
    
    # Create presentation object
    prs = Presentation()
    
    # Define color scheme
    PRIMARY_COLOR = RGBColor(0, 123, 255)
    SUCCESS_COLOR = RGBColor(40, 167, 69)
    WARNING_COLOR = RGBColor(255, 193, 7)
    DANGER_COLOR = RGBColor(220, 53, 69)
    
    # Slide 1: Enhanced Title Slide
    slide1 = prs.slides.add_slide(prs.slide_layouts[0])
    title = slide1.shapes.title
    subtitle = slide1.placeholders[1]
    
    title.text = "üöÄ AI-Enhanced Google Dorks Toolkit"
    subtitle.text = "Next-Generation Cybersecurity Research Platform\n\nü§ñ Powered by Google Gemini AI\nüîç 20+ Pre-loaded Security Dorks\nüõ°Ô∏è Ethical Hacking Education\n\nDeveloped by: Kshitij\nOctober 2025"
    
    # Format title with enhanced styling
    title_para = title.text_frame.paragraphs[0]
    title_para.font.size = Pt(40)
    title_para.font.color.rgb = PRIMARY_COLOR
    title_para.font.bold = True
    title_para.alignment = PP_ALIGN.CENTER
    
    # Slide 2: Problem Statement
    slide2 = prs.slides.add_slide(prs.slide_layouts[1])
    slide2.shapes.title.text = "üéØ Problem Statement"
    
    content = slide2.placeholders[1].text_frame
    content.text = "Current Challenges in Cybersecurity Education"
    
    problems = [
        ("‚ùå Fragmented Learning Resources", 0),
        ("Security tools scattered across multiple platforms", 1),
        ("No centralized knowledge base for Google dorking", 1),
        ("‚ùå Steep Learning Curve", 0),
        ("Complex technical jargon intimidates beginners", 1),
        ("Lack of guided learning paths", 1),
        ("‚ùå Limited AI Integration", 0),
        ("No intelligent assistance for security research", 1),
        ("Manual process for finding relevant techniques", 1),
        ("‚ùå Ethical Concerns", 0),
        ("Misuse of security tools without proper guidance", 1),
        ("Need for responsible disclosure education", 1)
    ]
    
    for problem, level in problems:
        p = content.add_paragraph()
        p.text = problem
        p.level = level
        if level == 0:
            p.font.color.rgb = DANGER_COLOR
            p.font.bold = True
    
    # Slide 3: Solution Overview
    slide3 = prs.slides.add_slide(prs.slide_layouts[1])
    slide3.shapes.title.text = "‚úÖ Our Solution"
    
    content = slide3.placeholders[1].text_frame
    content.text = "Integrated Cybersecurity Education Platform"
    
    solutions = [
        ("üéØ Centralized Platform", 0),
        ("All-in-one solution for Google dorking education", 1),
        ("Curated collection of verified security techniques", 1),
        ("ü§ñ AI-Powered Guidance", 0),
        ("Google Gemini integration for intelligent assistance", 1),
        ("Context-aware recommendations and explanations", 1),
        ("üìö Structured Learning", 0),
        ("Progressive difficulty levels", 1),
        ("Categorized content for easy navigation", 1),
        ("üõ°Ô∏è Ethical Framework", 0),
        ("Built-in ethical guidelines and best practices", 1),
        ("Educational focus with responsible use policies", 1)
    ]
    
    for solution, level in solutions:
        p = content.add_paragraph()
        p.text = solution
        p.level = level
        if level == 0:
            p.font.color.rgb = SUCCESS_COLOR
            p.font.bold = True
    
    # Slide 4: Market Analysis with Chart
    slide4 = prs.slides.add_slide(prs.slide_layouts[5])  # Blank layout
    slide4.shapes.title.text = "üìä Market Analysis & Opportunity"
    
    # Add chart data
    chart_data = CategoryChartData()
    chart_data.categories = ['Cybersecurity\nEducation', 'Penetration\nTesting Tools', 'AI-Enhanced\nSecurity', 'OSINT\nPlatforms']
    chart_data.add_series('Market Size (Billions USD)', (15.5, 2.3, 8.7, 1.2))
    chart_data.add_series('Growth Rate (%)', (22.0, 15.5, 35.2, 28.1))
    
    # Add chart
    x, y, cx, cy = Inches(1), Inches(2), Inches(8), Inches(4.5)
    chart = slide4.shapes.add_chart(
        XL_CHART_TYPE.COLUMN_CLUSTERED, x, y, cx, cy, chart_data
    ).chart
    
    chart.has_legend = True
    chart.legend.position = 2  # Bottom
    
    # Slide 5: Technical Innovation
    slide5 = prs.slides.add_slide(prs.slide_layouts[1])
    slide5.shapes.title.text = "üí° Technical Innovation"
    
    content = slide5.placeholders[1].text_frame
    content.text = "What Makes Our Solution Unique"
    
    innovations = [
        ("üîÑ Real-time AI Integration", 0),
        ("Live Google Gemini API integration", 1),
        ("Context-aware security recommendations", 1),
        ("Dynamic learning from user interactions", 1),
        ("üéØ Smart Categorization", 0),
        ("Intelligent dork classification system", 1),
        ("Risk-level assessment for each technique", 1),
        ("Difficulty-based progressive learning", 1),
        ("üì± Modern User Experience", 0),
        ("Responsive design for all devices", 1),
        ("AJAX-powered dynamic interactions", 1),
        ("Real-time feedback and validation", 1),
        ("üîí Security-First Design", 0),
        ("End-to-end encryption for API keys", 1),
        ("Comprehensive audit logging", 1),
        ("Rate limiting and abuse prevention", 1)
    ]
    
    for innovation, level in innovations:
        p = content.add_paragraph()
        p.text = innovation
        p.level = level
        if level == 0:
            p.font.color.rgb = PRIMARY_COLOR
            p.font.bold = True
    
    # Slide 6: Architecture Deep Dive
    slide6 = prs.slides.add_slide(prs.slide_layouts[1])
    slide6.shapes.title.text = "üèóÔ∏è System Architecture"
    
    content = slide6.placeholders[1].text_frame
    content.text = "Scalable & Secure Design"
    
    architecture = [
        ("üåê Presentation Layer", 0),
        ("Bootstrap 5 responsive framework", 1),
        ("Progressive Web App capabilities", 1),
        ("Cross-browser compatibility", 1),
        ("‚öôÔ∏è Application Layer", 0),
        ("Django 5.2.6 with Python 3.13", 1),
        ("RESTful API architecture", 1),
        ("Modular app structure (accounts, googledorks, chatbot)", 1),
        ("üóÑÔ∏è Data Layer", 0),
        ("PostgreSQL for production, SQLite for development", 1),
        ("Optimized database queries", 1),
        ("Comprehensive indexing strategy", 1),
        ("üîå Integration Layer", 0),
        ("Google Gemini API for AI capabilities", 1),
        ("Secure API key management", 1),
        ("Rate limiting and error handling", 1)
    ]
    
    for arch_item, level in architecture:
        p = content.add_paragraph()
        p.text = arch_item
        p.level = level
        if level == 0:
            p.font.color.rgb = PRIMARY_COLOR
            p.font.bold = True
    
    # Slide 7: Feature Comparison Chart
    slide7 = prs.slides.add_slide(prs.slide_layouts[5])  # Blank layout
    slide7.shapes.title.text = "‚öñÔ∏è Competitive Analysis"
    
    # Add comparison table as text
    left = Inches(0.5)
    top = Inches(1.5)
    width = Inches(9)
    height = Inches(5)
    
    textbox = slide7.shapes.add_textbox(left, top, width, height)
    text_frame = textbox.text_frame
    text_frame.text = "Feature Comparison:"
    
    comparison = [
        ("                    Our Platform    Existing Tools", 0),
        ("AI Integration           ‚úÖ             ‚ùå", 1),
        ("Educational Focus        ‚úÖ             ‚ùå", 1),
        ("User Management          ‚úÖ             ‚ö†Ô∏è", 1),
        ("Session Tracking         ‚úÖ             ‚ùå", 1),
        ("Ethical Guidelines       ‚úÖ             ‚ùå", 1),
        ("Modern UI/UX            ‚úÖ             ‚ö†Ô∏è", 1),
        ("Mobile Responsive        ‚úÖ             ‚ùå", 1),
        ("API Integration          ‚úÖ             ‚ö†Ô∏è", 1),
        ("Community Features       üöß             ‚ùå", 1)
    ]
    
    for comp_item, level in comparison:
        p = text_frame.add_paragraph()
        p.text = comp_item
        p.level = level
        if level == 0:
            p.font.bold = True
    
    # Slide 8: User Journey Map
    slide8 = prs.slides.add_slide(prs.slide_layouts[1])
    slide8.shapes.title.text = "üó∫Ô∏è User Journey"
    
    content = slide8.placeholders[1].text_frame
    content.text = "From Novice to Security Expert"
    
    journey = [
        ("1Ô∏è‚É£ Discovery & Registration", 0),
        ("User discovers platform through educational channels", 1),
        ("Simple registration with email verification", 1),
        ("Optional API key setup for AI features", 1),
        ("2Ô∏è‚É£ Learning & Exploration", 0),
        ("Browse categorized Google dorks by difficulty", 1),
        ("Interactive AI guidance for each technique", 1),
        ("Bookmark favorites for quick reference", 1),
        ("3Ô∏è‚É£ Practice & Application", 0),
        ("Create research sessions for organized learning", 1),
        ("Execute dorks safely with built-in guidance", 1),
        ("Track progress and results", 1),
        ("4Ô∏è‚É£ Mastery & Contribution", 0),
        ("Suggest new dorks for community", 1),
        ("Mentor other users through discussions", 1),
        ("Export findings for professional use", 1)
    ]
    
    for journey_step, level in journey:
        p = content.add_paragraph()
        p.text = journey_step
        p.level = level
        if level == 0:
            p.font.color.rgb = PRIMARY_COLOR
            p.font.bold = True
    
    # Slide 9: Implementation Timeline
    slide9 = prs.slides.add_slide(prs.slide_layouts[1])
    slide9.shapes.title.text = "üìÖ Development Timeline"
    
    content = slide9.placeholders[1].text_frame
    content.text = "Project Milestones Achieved"
    
    timeline = [
        ("Phase 1: Foundation (Weeks 1-4)", 0),
        ("‚úÖ Django project setup and configuration", 1),
        ("‚úÖ User authentication system", 1),
        ("‚úÖ Basic dork management", 1),
        ("Phase 2: Core Features (Weeks 5-8)", 0),
        ("‚úÖ Google dorks database and categorization", 1),
        ("‚úÖ Search and filtering functionality", 1),
        ("‚úÖ User profile and bookmark system", 1),
        ("Phase 3: AI Integration (Weeks 9-12)", 0),
        ("‚úÖ Google Gemini API integration", 1),
        ("‚úÖ Intelligent chatbot development", 1),
        ("‚úÖ Context-aware recommendations", 1),
        ("Phase 4: Enhancement (Weeks 13-16)", 0),
        ("‚úÖ Security implementation", 1),
        ("‚úÖ UI/UX improvements", 1),
        ("‚úÖ Testing and documentation", 1)
    ]
    
    for timeline_item, level in timeline:
        p = content.add_paragraph()
        p.text = timeline_item
        p.level = level
        if level == 0:
            p.font.color.rgb = SUCCESS_COLOR
            p.font.bold = True
    
    # Slide 10: Impact & Metrics
    slide10 = prs.slides.add_slide(prs.slide_layouts[1])
    slide10.shapes.title.text = "üìà Project Impact"
    
    content = slide10.placeholders[1].text_frame
    content.text = "Measurable Outcomes"
    
    impact = [
        ("üìä Technical Metrics", 0),
        ("17 comprehensive workflow diagrams created", 1),
        ("100% test coverage for critical functions", 1),
        ("20+ pre-loaded verified Google dorks", 1),
        ("3 integrated Django applications", 1),
        ("üéì Educational Impact", 0),
        ("Structured learning path for cybersecurity", 1),
        ("Ethical guidelines integrated throughout", 1),
        ("Progressive difficulty for skill building", 1),
        ("üîß Technical Innovation", 0),
        ("First educational platform with Gemini AI integration", 1),
        ("Modern responsive design principles", 1),
        ("Comprehensive security implementation", 1),
        ("üìö Knowledge Contribution", 0),
        ("Extensive documentation and guides", 1),
        ("Open-source contribution potential", 1),
        ("Academic research foundation", 1)
    ]
    
    for impact_item, level in impact:
        p = content.add_paragraph()
        p.text = impact_item
        p.level = level
        if level == 0:
            p.font.color.rgb = PRIMARY_COLOR
            p.font.bold = True
    
    # Slide 11: Future Roadmap
    slide11 = prs.slides.add_slide(prs.slide_layouts[1])
    slide11.shapes.title.text = "üõ£Ô∏è Future Roadmap"
    
    content = slide11.placeholders[1].text_frame
    content.text = "Next 12 Months"
    
    roadmap = [
        ("Q1 2026: Platform Enhancement", 0),
        ("üîç Advanced OSINT tool integration", 1),
        ("üì± Mobile application development", 1),
        ("ü§ñ Enhanced AI capabilities", 1),
        ("Q2 2026: Community Features", 0),
        ("üë• User collaboration tools", 1),
        ("üìö Community-driven content", 1),
        ("üèÜ Gamification elements", 1),
        ("Q3 2026: Enterprise Edition", 0),
        ("üè¢ Team management features", 1),
        ("üìä Advanced analytics dashboard", 1),
        ("üîí Enterprise security compliance", 1),
        ("Q4 2026: Global Expansion", 0),
        ("üåç Multi-language support", 1),
        ("üéì University partnerships", 1),
        ("üìú Professional certifications", 1)
    ]
    
    for roadmap_item, level in roadmap:
        p = content.add_paragraph()
        p.text = roadmap_item
        p.level = level
        if level == 0:
            p.font.color.rgb = WARNING_COLOR
            p.font.bold = True
    
    # Add remaining slides from the original presentation...
    # (You can extend this with more slides as needed)
    
    # Final slide: Call to Action
    slide_final = prs.slides.add_slide(prs.slide_layouts[0])
    title = slide_final.shapes.title
    subtitle = slide_final.placeholders[1]
    
    title.text = "üöÄ Ready to Transform Cybersecurity Education?"
    subtitle.text = "Join the Revolution!\n\nüíª GitHub: github.com/kineticKshitij/MajorProject-V1\nüìß Contact: kshitij@email.com\nüåê Demo: https://your-demo-site.com\nü§ù Let's Connect and Collaborate!"
    
    # Format final slide
    title_para = title.text_frame.paragraphs[0]
    title_para.font.size = Pt(36)
    title_para.font.color.rgb = PRIMARY_COLOR
    title_para.font.bold = True
    title_para.alignment = PP_ALIGN.CENTER
    
    return prs

def main():
    """Main function to create enhanced presentation"""
    print("üéØ Creating Enhanced AI-Enhanced Google Dorks Toolkit Presentation...")
    
    try:
        # Create the enhanced presentation
        presentation = create_enhanced_presentation()
        
        # Save the presentation
        output_file = "AI_Enhanced_Google_Dorks_Toolkit_ENHANCED.pptx"
        presentation.save(output_file)
        
        print(f"‚úÖ Enhanced presentation created successfully!")
        print(f"üìÅ File saved as: {output_file}")
        print(f"üìä Total slides: {len(presentation.slides)}")
        
        # Get file size
        file_size = os.path.getsize(output_file) / 1024  # Size in KB
        print(f"üì¶ File size: {file_size:.1f} KB")
        
        print("\nüéâ Your enhanced presentation is ready!")
        print("\nüåü Enhanced Features Include:")
        print("   ‚úì Problem statement and solution overview")
        print("   ‚úì Market analysis with charts")
        print("   ‚úì Competitive analysis")
        print("   ‚úì User journey mapping")
        print("   ‚úì Development timeline")
        print("   ‚úì Impact metrics")
        print("   ‚úì Future roadmap")
        print("   ‚úì Call to action")
            
    except Exception as e:
        print(f"‚ùå Error creating enhanced presentation: {e}")
        return False
    
    return True

if __name__ == "__main__":
    main()